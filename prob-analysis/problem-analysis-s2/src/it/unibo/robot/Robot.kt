/* Generated by AN DISI Unibo */ 
package it.unibo.robot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robot ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var GoalX = ""
				var GoalY = ""	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("robot init")
						updateResourceRep( "init"  
						)
					}
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("waitRequest") { //this:State
					action { //it:State
						updateResourceRep( "wait request"  
						)
					}
					 transition(edgeName="t00",targetState="waitRequest",cond=whenDispatch("stopPlan"))
					transition(edgeName="t01",targetState="move",cond=whenRequest("moveTo"))
				}	 
				state("move") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveTo(OldX,OldY,X,Y)"), Term.createTerm("moveTo(A,B,X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												GoalX = payloadArg(2)
												GoalY = payloadArg(3)
						}
						updateResourceRep( "move request to $GoalX $GoalY"  
						)
						stateTimer = TimerActor("timer_move", 
							scope, context!!, "local_tout_robot_move", 1000.toLong() )
					}
					 transition(edgeName="t02",targetState="moveOk",cond=whenTimeout("local_tout_robot_move"))   
					transition(edgeName="t03",targetState="waitRequest",cond=whenDispatch("stopPlan"))
				}	 
				state("moveOk") { //this:State
					action { //it:State
						answer("moveTo", "moveOk", "moveOk($GoalX,$GoalY)"   )  
						updateResourceRep( "move success to $GoalX $GoalY"  
						)
					}
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
			}
		}
}
