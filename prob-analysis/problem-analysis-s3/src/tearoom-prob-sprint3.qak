System tearoom
mqttBroker "localhost" : 1883 eventTopic "unibo/gozzi/events"

//Client - Smartbell, Entering
Request notify : notify(TEMP)
Reply deny : deny(X)
Reply accept : accept(CID)
Reply full : full(CID, WTIME)

//Smartbell - Waiter, Free Table
Request table : table(CID)
Reply available : available(CID)
Reply full : full(CID, WTIME)
Dispatch clientatentrance : clientatentrance(Cid) // self message

//Client - Waiter - Barman, Requesting+serving tea
Dispatch placeorder : placeorder(CID)
Request relayorder : relayorder(Cid)
Reply orderready : orderready(Cid)
//---------------------------------------------------------
Event delivered : delivered($Cid) 	// for client simulation purpose
//---------------------------------------------------------

//Client - Waiter, Requesting payment
Dispatch payment : payment(Cid)
//---------------------------------------------------------
Event attable: attable(Cid)			// for client simulation purpose
Event paymentOk : paymentOk(Cid)	// for client simulation purpose
Event exitOk : exitOk(Cid)			// for client simulation purpose
//---------------------------------------------------------

Dispatch cleantable : cleantable(Num) //self message, when teatable Num is dirty and free
Dispatch cleantableok : cleantableok(Num) //self message, when teatable Num has been cleaned

//Waiter - robot, movement
Request moveTo : moveTo(OldX, OldY, X, Y)	//start pos + destination pos
Reply moveOk : moveOk(X,Y)					//reached destination pos
Reply moveKo : moveKo(X,Y)	 				//current pos != moveTo
Dispatch stopPlan : stopPlan(a)				//Tell the planner to stop current plan

//For requirement maxstaytime
//From maxstaytime to waiter
Dispatch timeexpired : timeexpired(Cid)

Context ctxwaiter ip [host="localhost" port=8050]  			+mqtt
Context ctxsmartbell ip [host="localhost" port=8051]		+mqtt
//Context ctxhall ip [host="localhost" port=8052]			+mqtt
Context ctxbarman ip [host="localhost" port=8056]			+mqtt

// blackbox of physical robot (planner + actuator)
QActor robot context ctxwaiter{
	
	[#
		var GoalX = ""
		var GoalY = ""	
	#]
	
	State s0 initial{
		println("robot init")
		updateResource [# "init" #]
	}
	Goto waitRequest
	
	State waitRequest{
		updateResource [# "wait request" #]
	}
	Transition t0
		whenMsg stopPlan -> waitRequest // consume stop msgs
		whenRequest moveTo -> move
	
	State move{
		//println("robot move")
		//printCurrentMessage
		onMsg(moveTo : moveTo(A,B,X,Y)){
			[#
				GoalX = payloadArg(2)
				GoalY = payloadArg(3)
			#]
		}
		updateResource [# "move request to $GoalX $GoalY" #]
	}
	Transition t0
		whenTime 1000 -> moveOk	// simulate real movement
		whenMsg stopPlan -> moveKo
		
	State moveKo{
		replyTo moveTo with moveKo : moveKo($GoalX, $GoalY)
		updateResource [# "plan to $GoalX $GoalY was stopped" #]
	}
	Goto waitRequest
	
	State moveOk{
		replyTo moveTo with moveOk : moveOk($GoalX, $GoalY)
		updateResource [# "move success to $GoalX $GoalY" #]
	}
	Goto waitRequest
}

//ExternalQActor barman context ctxbarman
QActor barman context ctxbarman{
	
	State s0 initial{
	}
	Transition t0
		whenRequest relayorder -> prepareTea
	
	State prepareTea{
		onMsg( relayorder : relayorder(Cid) ){
			[# val Cid = payloadArg(0) #]
			delay 1000 // time to prepare tea
			replyTo relayorder with orderready : orderready($Cid)
			updateResource [# "tea prepared for $Cid" #]
		}
	}
	Transition t0
		whenRequest relayorder -> prepareTea
}

QActor smartbell context ctxsmartbell{
	
	[# 
		val MaxTemp = 37.5 
		var Cid = 1
	#]
	
	State s0 initial{
	}
	Transition t0
		whenRequest notify -> checkTemp
		
	State checkTemp{
		onMsg(notify : notify(Temp)){
			if [# payloadArg(0).toDouble() < MaxTemp #] {
				request waiter -m table : table($Cid) // case (a)
			}
			else{
				replyTo notify with deny : deny(0) //case (b)
			}
		}
	}
	Transition t1
		whenRequest 	notify 		-> checkTemp 	//in case (b)
		whenReply 		available 	-> replyClient 	//in case (a)
		whenReply 		full 		-> replyClient 	//in case (a)
		
	State replyClient{
		onMsg(available : available(CID)){
			replyTo notify with accept : accept($Cid)
		}
		onMsg(full : full(CID,WTIME)){
			[# val WaitTime = payloadArg(0) #]
			replyTo notify with full : full($Cid, $WaitTime)
		}
		[# Cid++ #] //new CID for next Client
	}
	Transition t2
		whenRequest notify -> checkTemp
}

QActor waiter context ctxwaiter {
	
	[#
		var MaxStayTime 	= 100000L	
		val DelayTime 		= 1000L
		val CleanDelayTime 	= 4000L
		val RestWaitTime 	= 5000L
		var CurrentCid		= ""
		val Name = name
		var IsWaiterAtHome  = true
		
		var Debug = false
	#]
	
	State s0 initial{
		discardMsg Off
		solve( consult("tearoomKB-PA-sprint3.pl") )
		[# println(pengine) #]
		solve( debug(true) ) ifSolved{ [# Debug = true #] }
		solve( maxStayTime(X) ) ifSolved{ [# MaxStayTime = getCurSol("X").toString().toLong() #] }
		println("waiter PA-s3 starting, debug is $Debug")
		solve( roomstate(S) ) 
		ifSolved { //Documentation says: #S => ${getCurSol("S").toString()}
			updateResource[# getCurSol("S").toString() #]
		}
	}Goto waitState
	
	State waitState{
		solve( roomstate(S) ) ifSolved { updateResource[# getCurSol("S").toString() #] }
		[#if(Debug)#]println(@S)
		solve(waiter(_,0,0)) ifSolved { [# IsWaiterAtHome = true #] } else{ [# IsWaiterAtHome = false #] }
	}
	Transition t0
		whenTimeVar RestWaitTime		-> maybeRest				//chosen if no other msg arrives soon, check if there is a dirty table, else wait for real rest
		whenMsg 	payment 			-> getPayment
		whenMsg 	timeexpired			-> checkClientTime
		whenRequest table 				-> checkTableAvail
		whenMsg 	clientatentrance 	-> reach
		whenMsg 	placeorder 			-> takeOrder
		whenReply 	orderready 			-> serveOrder
		whenMsg		cleantable 			-> thinkCleanTable

	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//this state implements requirements "accept" and "inform"
	State checkTableAvail{
		[#if(Debug)#]println("waiter checkTableAvail")
		onMsg(table : table(Cid)){
			[# CurrentCid = payloadArg(0) #]
			solve( updateWaiterState(X,checkAvailability($CurrentCid)) )
			solve( occupyHall($CurrentCid) )
			solve( reserveTable(Num, $CurrentCid) )//accept
			ifSolved {
				replyTo table with available : available($CurrentCid)
				forward waiter -m clientatentrance : clientatentrance($CurrentCid) //so that the waiter will eventually do the "reach" task
			}
			else{//inform				
				replyTo table with full : full($CurrentCid, $MaxStayTime)
				solve( assert( client($CurrentCid, onhold) ) )
			}
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
		[#if(Debug)#]println(@S)
	}
	Goto waitState
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//this state implements requirement "reach"
	State reach{//goto entrance + goto table
		[#if(Debug)#]println("waiter reach")
		onMsg(clientatentrance : clientatentrance(CurrentCid)){
			[# CurrentCid = payloadArg(0) #]
			solve(updateWaiterState(X,reach($CurrentCid)))
		}
		onMsg(moveKo : moveKo(X, Y)){//in case the move failed update where the robot has arrived
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(A,$X,$Y))
		}
		//solve(pos(entrancedoor, X, Y)) 
		//----------------------------------------------------------------------------------------------------
		//request robot -m moveTo : moveTo(#X, #Y) //-------------------- no implementation for #VarRefInStr ?
		//----------------------------------------------------------------------------------------------------
		solve(coordinatesTo(entrancedoor, OldX, OldY, X, Y))//move to entrancedoor
		ifSolved { 
			[#  val OldX = getCurSol("OldX").toString()
				val OldY = getCurSol("OldY").toString()
				val X = getCurSol("X").toString()
				val Y = getCurSol("Y").toString()		#]
			request robot -m moveTo : moveTo($OldX, $OldY, $X, $Y)
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
		[#if(Debug)#]println(@S)
	}
	Transition t0
		whenReply moveOk -> reachp2//now at the entrancedoor
		whenReply moveKo -> reach  //retry
	
	
	State reachp2{//at entrance + goto table
		[#if(Debug)#]println("waiter reachp2")
		onMsg(moveKo : moveKo(X, Y)){//in case the move failed update where the robot has arrived
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(_,$X,$Y))
		}
		onMsg(moveOk : moveOk(X,Y)){
			solve( freeHall($CurrentCid) )//client "collected"		
			solve( updateClient($CurrentCid, entering) )
			solve( updateWaiterLoc(entrancedoor,X,Y) )
			solve( updateWaiterState(X,at(entrancedoor)) )
		}
		solve( teatable(Num, reserved($CurrentCid), clean) ) // find reserved table
		[# val TableNum = getCurSol("Num").toString() #]
		
		solve(coordinatesTo(teatable($TableNum), OldX, OldY, X, Y))//move to teatable
		ifSolved { 
			[#  val OldX = getCurSol("OldX").toString()
				val OldY = getCurSol("OldY").toString()
				val X = getCurSol("X").toString()
				val Y = getCurSol("Y").toString()		#]
			request robot -m moveTo : moveTo($OldX, $OldY, $X, $Y)
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #][#if(Debug)#]println(@S) } 
	}
	Transition t0
		whenReply moveOk -> reachp3	 //now at the table
		whenReply moveKo -> reachp2  //retry
	
	State reachp3{//at table
		[#if(Debug)#]println("waiter reachp3")
		solve( teatable(Num, reserved($CurrentCid), clean) ) // find reserved table
		[# val TableNum = getCurSol("Num").toString() #]
		solve( updateWaiterState(X, deployed($CurrentCid,$TableNum)) )
		solve( updateWaiterLoc(teatable($TableNum),X,Y))
		solve( engageTable($TableNum, $CurrentCid) ) // occupy table
		emit attable : attable($CurrentCid)
		solve( updateClient($CurrentCid, choosing) )
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #][#if(Debug)#]println(@S) } 
	}
	Goto waitState
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//this state implements requirement "take"
	State takeOrder{//goto table + request relayorder
		[#if(Debug)#]println("waiter takeOrder")
		onMsg(moveKo : moveKo(X, Y)){//in case the move failed update where the robot has arrived
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(S,$X,$Y))
		}
		onMsg(placeorder : placeorder(CurrentCid)){
			[# CurrentCid = payloadArg(0) #]
			solve(updateWaiterState(X, goTakeOrder($CurrentCid)))
			solve( updateClient($CurrentCid, placeorder) )
			}
		solve( teatable(Num, busy($CurrentCid), dirty) ) // find correct table
		[# val TableNum = getCurSol("Num").toString() #]
		solve(coordinatesTo(teatable($TableNum), OldX, OldY, X, Y))//move to teatable
		ifSolved { 
			[#  val OldX = getCurSol("OldX").toString()
				val OldY = getCurSol("OldY").toString()
				val X = getCurSol("X").toString()
				val Y = getCurSol("Y").toString()		#]
			request robot -m moveTo : moveTo($OldX, $OldY, $X, $Y)
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #][#if(Debug)#]println(@S) } 
	}
	Transition t0
		whenReply moveOk -> takeOrderp2	 //now at the table
		whenReply moveKo -> takeOrder  //retry
		
		
		
	State takeOrderp2{//at table + request relayorder
		solve( teatable(Num, busy($CurrentCid), dirty) ) // find correct table
		[# val TableNum = getCurSol("Num").toString() #]
		solve( updateWaiterLoc(teatable($TableNum),X,Y))
		solve( updateWaiterState(X, takingOrder($CurrentCid)) )
		solve( updateClient($CurrentCid, orderplaced) )
		request barman -m relayorder : relayorder($CurrentCid) //real task BL
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #][#if(Debug)#]println(@S) } 
	}
	Goto waitState	
		
		
		
		

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//this state implements requirement "serve"
	State serveOrder{//goto bar + goto table
		[#if(Debug)#]println("waiter serveOrder")
		onMsg(orderready : orderready(CurrentCid)){
			[# CurrentCid = payloadArg(0) #]
			solve(updateWaiterState(X, getOrder($CurrentCid)))
		}
		onMsg(moveKo : moveKo(X, Y)){//in case the move failed update where the robot has arrived
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(S,$X,$Y))
		}
		solve(coordinatesTo(barman, OldX, OldY, X, Y))//move to barman
		ifSolved { 
			[#  val OldX = getCurSol("OldX").toString()
				val OldY = getCurSol("OldY").toString()
				val X = getCurSol("X").toString()
				val Y = getCurSol("Y").toString()	#]		
			request robot -m moveTo : moveTo($OldX, $OldY, $X, $Y)
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #][#if(Debug)#]println(@S) } 
	}
	Transition t0
		whenReply moveOk -> serveOrderp2	 //now at the table
		whenReply moveKo -> serveOrder  //retry
		
		
	State serveOrderp2{//at bar, goto table
		onMsg(moveKo : moveKo(X, Y)){//in case the move failed update where the robot has arrived
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(_,$X,$Y))
		}
		onMsg(moveOk : moveOk(X,Y)){
			solve( updateWaiterState(X, bar($CurrentCid)) )
			solve( updateWaiterLoc(barman,X,Y) )
		}
		solve( teatable(Num, busy($CurrentCid), dirty) ) // find correct table
		[# val TableNum = getCurSol("Num").toString() #]
		solve(coordinatesTo(teatable($TableNum), OldX, OldY, X, Y))//move to teatable
		ifSolved { 
			[#  val OldX = getCurSol("OldX").toString()
				val OldY = getCurSol("OldY").toString()
				val X = getCurSol("X").toString()
				val Y = getCurSol("Y").toString() #]
			request robot -m moveTo : moveTo($OldX, $OldY, $X, $Y)
		}		
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #][#if(Debug)#]println(@S) } 
	}
	Transition t0
		whenReply moveOk -> serveOrderp3	 //now at the table
		whenReply moveKo -> serveOrderp2  //retry
		
	State serveOrderp3{//at table
		onMsg(moveOk : moveOk(X,Y)){
			solve( teatable(Num, busy($CurrentCid), dirty) ) // find correct table
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   
				val TableNum = getCurSol("Num").toString()	#]
			solve( updateWaiterLoc(teatable($TableNum),$X,$Y) )
			solve( updateWaiterState(X, serving($CurrentCid)) )
			solve( updateClient($CurrentCid, consuming) )
			//-------------------------------------------
			emit delivered : delivered($CurrentCid) //just for simulation, in real life the client would see that the waiter has brought the tea
			[# forwardWithDelay("timeexpired", "timeexpired($CurrentCid)", "waiter", MaxStayTime) #]
			//-------------------------------------------
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #][#if(Debug)#]println(@S) } 
	}
	Goto waitState




//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//this state implements requirement "MaxStayTime"
	State checkClientTime{
		onMsg(timeexpired : timeexpired(Cid)){
			[# val CurrentCid = payloadArg(0) #]
			solve( client($CurrentCid,consuming) ) // if the client 
			ifSolved{ forward waiter -m payment : payment($CurrentCid) }
		}	
	}
	Goto waitState
	
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//this state implements requirements "collect" and "exit"
	State getPayment{//goto table + goto exitdoor
		[#if(Debug)#]println("waiter getPayment")
		onMsg(payment : payment(CurrentCid)){
			[# CurrentCid = payloadArg(0) #]
			solve(updateWaiterState(X, getPayment($CurrentCid)))
		}
		onMsg(moveKo : moveKo(X, Y)){//in case the move failed update where the robot has arrived
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(_,$X,$Y))
		}
		solve( teatable(Num, busy($CurrentCid), dirty) ) // find correct table
		[# val TableNum = getCurSol("Num").toString() #]
		solve(coordinatesTo(teatable($TableNum), OldX, OldY, X, Y))//move to teatable
		ifSolved { 
			[#  val OldX = getCurSol("OldX").toString()
				val OldY = getCurSol("OldY").toString()
				val X = getCurSol("X").toString()
				val Y = getCurSol("Y").toString()		#]
			request robot -m moveTo : moveTo($OldX, $OldY, $X, $Y)
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
	}
	Transition t0
		whenReply moveOk -> getPaymentp2	 //now at the table
		whenReply moveKo -> getPayment  //retry
		
	State getPaymentp2{//at table + goto exitdoor
		onMsg(moveOk : moveOk(X,Y)){
			solve( teatable(Num, busy($CurrentCid), dirty) ) // find correct table
			[# val TableNum = getCurSol("Num").toString() #]
			solve( updateWaiterState(X, paymentatteatable($TableNum)) ) 
			solve( updateWaiterLoc(teatable($TableNum),X,Y) )
			solve( updateClient($CurrentCid, paying) )
			delay 2000
			solve( freeTable($TableNum, $CurrentCid) )
			emit paymentOk : paymentOk($CurrentCid)
			solve( updateClient($CurrentCid, leaving) )
			forward waiter -m cleantable : cleantable($TableNum) // remember to clean the table
		}
		onMsg(moveKo : moveKo(X, Y)){//in case the move failed update where the robot has arrived
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve( updateWaiterLoc(_,$X,$Y) )
			solve( updateClient($CurrentCid, leaving) )
		}
		
		solve(coordinatesTo(exitdoor, OldX, OldY, X, Y))//move to exitdoor
		ifSolved { 
			[#  
				val OldX = getCurSol("OldX").toString()
				val OldY = getCurSol("OldY").toString()
				val X = getCurSol("X").toString()
				val Y = getCurSol("Y").toString()
			#]
			request robot -m moveTo : moveTo($OldX, $OldY, $X, $Y)	 // current xtext but not efficient
			//request robot -m moveTo : moveTo(#OldX, #OldY, #X, #Y) // current xtext not working
			//request robot -m moveTo : moveTo(^OldX, ^OldY, ^X, ^Y) // my xtext test
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
	}
	Transition t0
		whenReply moveOk -> escortToExit	 //goto exitdoor
		whenReply moveKo -> getPaymentp2  //retry
		
	State escortToExit{//at exitdoor
		onMsg(moveOk : moveOk(X,Y)){
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			emit exitOk : exitOk($CurrentCid)
			solve( updateWaiterLoc(at(exitdoor),$X,$Y) )
			solve( updateWaiterState(X, at(exitdoor)) ) 
			solve( updateClient($CurrentCid, left) )
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
		delay 500
	}Goto waitState
	
	
	
//----------------------------------------------------------------------------------------------------
	State thinkCleanTable{
		onMsg(cleantable : cleantable(Num)){
			[# val TableNum = payloadArg(0) #]
			solve( updateWaiterState(X, gocleanteatable($TableNum)) )
		}
		onMsg(moveKo : moveKo(X, Y)){//in case the move failed update where the robot has arrived
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve( updateWaiterLoc(gocleanteatable(Num),$X,$Y) )
		}
		solve( waiter(gocleanteatable(Num), _, _) )
		[# val TableNum = getCurSol("Num").toString() #]
		solve( coordinatesTo(teatable($TableNum), OldX, OldY, X, Y) ) //move to teatable
		ifSolved { 
		[#  val OldX = getCurSol("OldX").toString()
			val OldY = getCurSol("OldY").toString()
			val X = getCurSol("X").toString()
			val Y = getCurSol("Y").toString()		#]
		request robot -m moveTo : moveTo($OldX, $OldY, $X, $Y)
		}
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
	}//task can be interrupted so always check if there are other messages
	Transition t0
		whenReply moveOk -> cleanTable	 	 //now at the table
		whenReply moveKo -> thinkCleanTable  //retry
		whenRequest table 				-> cancelCurrentPlan
		whenMsg 	clientatentrance 	-> cancelCurrentPlan
		whenMsg 	placeorder 			-> cancelCurrentPlan
		whenReply 	orderready 			-> cancelCurrentPlan
		whenMsg 	payment 			-> cancelCurrentPlan
		
	State cancelCurrentPlan{
		[# autoMsg(currentMsg) #] // remember to process the ApplMsg that caused plan abortion
		forward robot -m stopPlan : stopPlan(0)
		if [#Debug#]{println("end of cancelCurrentPlan") [# readLine() #]}
	}
	Transition t0
		whenReply moveOk -> handlePlanCancel
		whenReply moveKo -> handlePlanCancel
		
	State handlePlanCancel{
		onMsg(moveOk : moveOk(X, Y)){
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(_,$X,$Y))
		}
		onMsg(moveKo : moveKo(X, Y)){
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(_,$X,$Y))
		}
		solve( updateWaiterState(X, cancelplan) )
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
		if [#Debug#]{println("end of handlePlanCancel") [# readLine() #]}
	}
	Goto waitState
		
		
	State cleanTable{//actually at the table that needs cleaning
		[#if(Debug)#]println("waiter cleanTable")
		onMsg(moveOk : moveOk(X, Y)){
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(teatable(Num),$X,$Y))
			[# val TableNum = getCurSol("Num").toString() #]	
			solve( updateWaiterState(X, atteatable($TableNum)) ) 
			solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
			forward waiter -m cleantable : cleantable($TableNum)
		}
		
	}
	Transition t0
		// if no client makes a request start cleaning
		whenTime	100					-> doClean	
		// else serve the request
		whenRequest table 				-> checkTableAvail
		whenMsg 	clientatentrance 	-> reach	
		whenMsg 	placeorder 			-> takeOrder
		whenReply 	orderready 			-> serveOrder
		whenMsg 	payment 			-> getPayment
		whenMsg 	cleantable 			-> doClean
		
	State doClean{//cleaning is still one single activity i.e. not stoppable
		[#if(Debug)#]println("waiter doClean")
		onMsg(cleantable : cleantable(Num)){
			[# val TableNum = payloadArg(0) #]
			solve(updateWaiterState(atteatable($TableNum), cleaning($TableNum)))
		
			delayVar CleanDelayTime // clean table, waiter cannot process incoming messages
			solve( cleanTable($TableNum, NewStatus) ) // "automatically" handles every status
			[# val NewStatus = getCurSol("NewStatus").toString() #]
			if [# NewStatus == "clean" #]{
				forward waiter -m cleantableok : cleantableok($TableNum)
				solve( updateWaiterState(X, cleaned($TableNum)) )
			} //checkClientOnHold will eventually be processed
			else{
				forward waiter -m cleantable : cleantable($TableNum)  
				solve( updateWaiterState(X, cleaning($TableNum,$NewStatus)) )
			}
		}
		solve( roomstate(S) ) ifSolved { updateResource[# getCurSol("S").toString() #] }
	}
	Transition t0
		whenMsg 	cleantableok -> checkClientOnHold
		whenRequest table 				-> checkTableAvail
		whenMsg 	clientatentrance 	-> reach	
		whenMsg 	placeorder 			-> takeOrder
		whenReply 	orderready 			-> serveOrder
		whenMsg 	payment 			-> getPayment
		// in case there is nothing else to do keep cleaning
		whenMsg 	cleantable 			-> doClean
	
	// added to accept a client that was given the full room reply after a table has been cleaned
	State checkClientOnHold{
		[#if(Debug)#]println("table cleaned letting somebody in")
//		solve( teatable(N, free, clean) )// free teatable ? in this model only one waiter, so always yes
//		ifSolved{
//		[#if(Debug)#]println("ok, table is really cleaned")
		[# if(Debug) #]solve(clients(L))
		[# if(Debug) println("clients are: ${getCurSol("L").toString()}") #]
		solve( client(Cid, onhold) ) // there is a client on hold
		ifSolved{
			[# val OnHoldCid = getCurSol("Cid").toString() #]
			[# if(Debug)println("ok, client waiting is num: $OnHoldCid") #]
			if [# Debug #] {solve( roomstate(S) ) ifSolved { [# println("------------------------------------pre solves ${getCurSol("S").toString()}") #] }}
			solve( retract( client($OnHoldCid, onhold)) )
			solve( reserveTable(N,$OnHoldCid) )
			ifSolved {// client waiting in the hall can enter
				solve( roomstate(S) ) ifSolved { updateResource[# getCurSol("S").toString() #] }
				[#if(Debug) println("DEBUG ---------- sending clientatantrence($OnHoldCid)  ------------") #] 
				forward waiter -m clientatentrance : clientatentrance($OnHoldCid) //so that the waiter will eventually do the "reach" task
			}			
			if [# Debug #] {solve( roomstate(S) ) ifSolved { [# println("------------------------------------post solves ${getCurSol("S").toString()}") #] } }
			// check if there's another table to clean
			solve( teatable(Num, free, dirty) )  ifSolved{ [# val TableNum = getCurSol("Num").toString() #] forward waiter -m cleantable : cleantable($TableNum)}
		}
//		}
	}
	Goto waitState
		
			
//----------------------------------------------------------------------------------------------------		
	//maybeRest because a NonEmptyTransition can only begin with a Timeout
	//and Timeout cannot be guarded (i.e. "whenTime 1000 and [# Guard #]" is not correct syntax)
	State maybeRest{}
	Goto waitState if [# IsWaiterAtHome #] else checkDirtyTable
	State checkDirtyTable{ solve( teatable(Num, free, dirty) )  ifSolved{ [# val TableNum = getCurSol("Num").toString() #] forward waiter -m cleantable : cleantable($TableNum)} }
	Transition t0
		whenTimeVar RestWaitTime -> rest
		whenMsg 	cleantable -> thinkCleanTable
		whenMsg 	clientatentrance 	-> reach
		whenMsg 	placeorder 			-> takeOrder
		whenReply 	orderready 			-> serveOrder
		whenMsg 	payment 			-> getPayment
		
	State rest{
		[#if(Debug)#]println("waiter rest")
		solve( updateWaiterState(X, gorest ) )
		onMsg(moveKo : moveKo(X, Y)){//in case the move failed update where the robot has arrived
			[#  val X = payloadArg(0)
				val Y = payloadArg(1)   #]
			solve(updateWaiterLoc(_,$X,$Y))
			solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
		}
		solve(coordinatesTo(home, OldX, OldY, X, Y))//move to teatable
		ifSolved { 
			[#  val OldX = getCurSol("OldX").toString()
				val OldY = getCurSol("OldY").toString()
				val X = getCurSol("X").toString()
				val Y = getCurSol("Y").toString()		#]
			request robot -m moveTo : moveTo($OldX, $OldY, $X, $Y)
		}
		}
	Transition t0
		whenReply moveOk -> atHome	 //now at the table
		whenReply moveKo -> rest  //retry
		whenRequest table 				-> cancelCurrentPlan
		whenMsg 	clientatentrance 	-> cancelCurrentPlan
		whenMsg 	placeorder 			-> cancelCurrentPlan
		whenReply 	orderready 			-> cancelCurrentPlan
		whenMsg 	payment 			-> cancelCurrentPlan
		whenMsg 	cleantable 			-> thinkCleanTable
		
	State atHome{
		[#if(Debug)#]println("waiter athome")
		solve( updateWaiterState(X, rest ) )
		solve( updateWaiterLoc(home,X,Y) )
		solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
	}
	Goto waitState
	
}

