/* Generated by AN DISI Unibo */ 
package it.unibo.waiterkb

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiterkb ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 kb.kbMqtt.initKB(context!!.mqttAddr)  
						stateTimer = TimerActor("timer_s0", 
							scope, context!!, "local_tout_waiterkb_s0", 5000.toLong() )
					}
					 transition(edgeName="t00",targetState="alive",cond=whenTimeout("local_tout_waiterkb_s0"))   
				}	 
				state("alive") { //this:State
					action { //it:State
						stateTimer = TimerActor("timer_alive", 
							scope, context!!, "local_tout_waiterkb_alive", 5000.toLong() )
					}
					 transition(edgeName="t01",targetState="alive",cond=whenTimeout("local_tout_waiterkb_alive"))   
				}	 
			}
		}
}
