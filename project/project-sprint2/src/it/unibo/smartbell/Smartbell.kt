/* Generated by AN DISI Unibo */ 
package it.unibo.smartbell

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Smartbell ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				val MaxTemp = 37.5 
				var Cid = 1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition(edgeName="t012",targetState="checkTemp",cond=whenRequest("notify"))
				}	 
				state("checkTemp") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("notify(TEMP)"), Term.createTerm("notify(Temp)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(0).toDouble() < MaxTemp  
								 ){request("table", "table($Cid)" ,"waiter" )  
								}
								else
								 {answer("notify", "deny", "deny(0)"   )  
								 }
						}
					}
					 transition(edgeName="t113",targetState="checkTemp",cond=whenRequest("notify"))
					transition(edgeName="t114",targetState="replyClient",cond=whenReply("available"))
					transition(edgeName="t115",targetState="replyClient",cond=whenReply("full"))
				}	 
				state("replyClient") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("available(CID)"), Term.createTerm("available(CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("notify", "accept", "accept($Cid)"   )  
						}
						if( checkMsgContent( Term.createTerm("full(CID,WTIME)"), Term.createTerm("full(CID,WTIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val WaitTime = payloadArg(0)  
								answer("notify", "full", "full($Cid,$WaitTime)"   )  
						}
						 Cid++  
					}
					 transition(edgeName="t216",targetState="checkTemp",cond=whenRequest("notify"))
				}	 
			}
		}
}
