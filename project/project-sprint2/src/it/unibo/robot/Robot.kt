/* Generated by AN DISI Unibo */ 
package it.unibo.robot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robot ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var CurrentPlannedMove = ""
				val mapname                    = "teaRoomExplored"
				var Started			            = false
		//		val StepTime                   = 600L //firefox f11 on laptop registrazione
		//		val StepTime                   = 800L //firefox f11 on monitor registrazione
		//		val StepTime                   = 600L //firefox f11 on monitor no registrazione
				var X = ""
				var Y = ""
				var Debug = false
				var StepTime = 500L
				var StepFailWaitTime = 5000L
				var Fails = 1
				var StepFailTime = 150L
				var LastTurn = ""
				val Name = name
				val MapTopic = "unibo/qak/robot/map"
				val ControlTopic = "unibo/qak/robot/control"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("robot init")
						solve("consult('tearoomKB-project-sprint2.pl')","") //set resVar	
						solve("stepTime(X)","") //set resVar	
						if( currentSolution.isSuccess() ) { StepTime = getCurSol("X").toString().toLong()  
						println("robot StepTime = $StepTime")
						}
						else
						{}
						solve("stepFailWaitTime(X)","") //set resVar	
						if( currentSolution.isSuccess() ) { StepFailWaitTime = getCurSol("X").toString().toLong()  
						println("robot StepFailWaitTime = $StepFailWaitTime")
						}
						else
						{}
						solve("debug($Name,true)","") //set resVar	
						if( currentSolution.isSuccess() ) { Debug = true  
						println("robot Debug = $Debug")
						}
						else
						{}
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( mapname  )
						 val Map = itunibo.planner.plannerUtil.getMapHTML()  
						 publish(Map, MapTopic)  
						if(  Debug  
						 ){println("INITIAL MAP")
						itunibo.planner.plannerUtil.showMap(  )
						}
						updateResourceRep( "robot planner ok"  
						)
					}
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("waitRequest") { //this:State
					action { //it:State
						 publish("Robot automatically controlled, press to switch to manual", ControlTopic)  
					}
					 transition(edgeName="t00",targetState="waitRequest",cond=whenDispatch("stopPlan"))
					transition(edgeName="t01",targetState="manualControl",cond=whenDispatch("manual"))
					transition(edgeName="t02",targetState="planForMoves",cond=whenRequest("moveTo"))
				}	 
				state("manualControl") { //this:State
					action { //it:State
						 publish("Robot manually controlled, press to switch to auto", ControlTopic)  
						 val Map = itunibo.planner.plannerUtil.getMapHTML()  
						 publish(Map, MapTopic)  
					}
					 transition(edgeName="t03",targetState="waitRequest",cond=whenDispatch("manual"))
				}	 
				state("planForMoves") { //this:State
					action { //it:State
						if(Debug) 
						println("robot planForMoves")
						if( checkMsgContent( Term.createTerm("moveTo(OldX,OldY,X,Y)"), Term.createTerm("moveTo(A,B,X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val A = payloadArg(0)
												val B = payloadArg(1)
												X = payloadArg(2)
												Y = payloadArg(3)
												itunibo.planner.plannerUtil.planForGoal(X,Y)
												if(Debug){
													println("Invio per iniziare da $A $B a goal $X $Y")
													println("Le mosse sono ${itunibo.planner.plannerUtil.getActions()}")
													readLine()
												}
						}
						stateTimer = TimerActor("timer_planForMoves", 
							scope, context!!, "local_tout_robot_planForMoves", 200.toLong() )
					}
					 transition(edgeName="t04",targetState="execPlannedMoves",cond=whenTimeout("local_tout_robot_planForMoves"))   
					transition(edgeName="t05",targetState="replyKo",cond=whenDispatch("stopPlan"))
				}	 
				state("execPlannedMoves") { //this:State
					action { //it:State
						if(Debug) 
						println("robot execPlannedMoves")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("stepdone(V)"), Term.createTerm("stepdone(A)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  Fails > 1  
								 ){forward("cmd", "cmd(s)" ,"basicrobot" ) 
								delay(50) 
								forward("cmd", "cmd(h)" ,"basicrobot" ) 
								delay(50) 
								}
								 Fails = 1  
								if(  Debug  
								 ){
												val msg = "robot: stepdone $CurrentPlannedMove : ${payloadArg(0)}"
												itunibo.planner.plannerUtil.showMap() 
												itunibo.planner.plannerUtil.updateMap(CurrentPlannedMove,msg)
								}
								else
								 {itunibo.planner.plannerUtil.updateMap( CurrentPlannedMove, ""  )
								  val Map = itunibo.planner.plannerUtil.getMapHTML()  
								  publish(Map, MapTopic)  
								 }
						}
						  
						 			CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove()
						 			if(Debug){
							 			println("Invio per vedere mosse rimanenti")
										readLine()
										itunibo.planner.plannerUtil.showMap() 
										println("Now $CurrentPlannedMove in ${itunibo.planner.plannerUtil.getActions()}")
									}
						stateTimer = TimerActor("timer_execPlannedMoves", 
							scope, context!!, "local_tout_robot_execPlannedMoves", 100.toLong() )
					}
					 transition(edgeName="t06",targetState="maybeExecTheMove",cond=whenTimeout("local_tout_robot_execPlannedMoves"))   
					transition(edgeName="t07",targetState="replyKo",cond=whenDispatch("stopPlan"))
				}	 
				state("maybeExecTheMove") { //this:State
					action { //it:State
						if(Debug) 
						println("maybeExecTheMove")
						if(  CurrentPlannedMove.length == 0  
						 ){answer("moveTo", "moveOk", "moveOk($X,$Y)"   )  
						if(Debug) 
						println("Plan completed successfully")
						if(Debug) 
						itunibo.planner.plannerUtil.showMap(  )
						}
					}
					 transition( edgeName="goto",targetState="execTheMove", cond=doswitchGuarded({ CurrentPlannedMove.length > 0  
					}) )
					transition( edgeName="goto",targetState="waitRequest", cond=doswitchGuarded({! ( CurrentPlannedMove.length > 0  
					) }) )
				}	 
				state("execTheMove") { //this:State
					action { //it:State
						if(Debug) 
						println("robot execTheMove")
						if(  CurrentPlannedMove == "w"  
						 ){request("step", "step($StepTime)" ,"basicrobot" )  
						}
						else
						 {forward("cmd", "cmd($CurrentPlannedMove)" ,"basicrobot" ) 
						 if(Debug) 
						 itunibo.planner.plannerUtil.updateMap( CurrentPlannedMove, "robot: turning $CurrentPlannedMove"  )
						 else 
						 itunibo.planner.plannerUtil.updateMap( CurrentPlannedMove, ""  )
						  val Map = itunibo.planner.plannerUtil.getMapHTML()  
						  publish(Map, MapTopic)  
						  LastTurn = CurrentPlannedMove  
						 delay(300) 
						 }
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({ CurrentPlannedMove != "w"  
					}) )
					transition( edgeName="goto",targetState="waitStepReply", cond=doswitchGuarded({! ( CurrentPlannedMove != "w"  
					) }) )
				}	 
				state("waitStepReply") { //this:State
					action { //it:State
						if(Debug) 
						println("robot waitReply")
					}
					 transition(edgeName="t08",targetState="execPlannedMoves",cond=whenReply("stepdone"))
					transition(edgeName="t09",targetState="handleStepFailure",cond=whenReply("stepfail"))
				}	 
				state("handleStepFailure") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stepfail(DURATION,CAUSE)"), Term.createTerm("stepfail(D,C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("robot replyWithFailure")
								forward("cmd", "cmd(s)" ,"basicrobot" ) 
								delay((Fails++) * StepFailTime ) 
								forward("cmd", "cmd(h)" ,"basicrobot" ) 
								delay(50) 
								
									    		val NewX = itunibo.planner.plannerUtil.get_curPos().first
									    		val NewY = itunibo.planner.plannerUtil.get_curPos().second
									    		
									    		/*if( Fails > 6){    	
									    			println("Move Robot manually to the r cell then press Enter to resume")
									    			itunibo.planner.plannerUtil.showMap() 
									    			readLine()
										    	}*/
										    	
								answer("moveTo", "moveKo", "moveKo($NewX,$NewY)"   )  
						}
					}
					 transition( edgeName="goto",targetState="handleFailRebounce", cond=doswitchGuarded({ Fails > ((StepTime / StepFailTime) + 1)  
					}) )
					transition( edgeName="goto",targetState="waitRequest", cond=doswitchGuarded({! ( Fails > ((StepTime / StepFailTime) + 1)  
					) }) )
				}	 
				state("handleFailRebounce") { //this:State
					action { //it:State
						 if(LastTurn == "l") {  
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						delay(400) 
						forward("cmd", "cmd(s)" ,"basicrobot" ) 
						delay(150) 
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						delay(50) 
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						 } else if(LastTurn == "r") {  
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						delay(400) 
						forward("cmd", "cmd(s)" ,"basicrobot" ) 
						delay(150) 
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						delay(50) 
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						 } 
							    	println("DEBUG --------------- handleFailRebounce with last turn = $LastTurn ")
						//	    	val RecoverStepTime = Fails * StepFailTime - 50
									itunibo.planner.plannerUtil.showMap() 
									//readLine()
					}
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("replyKo") { //this:State
					action { //it:State
						 val NewX = itunibo.planner.plannerUtil.get_curPos().first
							       val NewY = itunibo.planner.plannerUtil.get_curPos().second  
						answer("moveTo", "moveKo", "moveKo($NewX,$NewY)"   )  
					}
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
			}
		}
}
