/* Generated by AN DISI Unibo */ 
package it.unibo.waiter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val MaxStayTime 	= 100000L	
				val DelayTime 		= 1000L
				val RestWaitTime 	= 5000L
				var CurrentCid		= ""
				var Debug = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("project waiter starting")
						discardMessages = false
						solve("consult('tearoomKB-project-sprint1.pl')","") //set resVar	
						solve("debugwaiter(X)","") //set resVar	
						if( currentSolution.isSuccess() ) { Debug = true  
						}
						else
						{}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition(edgeName="t013",targetState="checkTableAvail",cond=whenRequest("table"))
				}	 
				state("checkTableAvail") { //this:State
					action { //it:State
						println("waiter checkTableAvail")
						if( checkMsgContent( Term.createTerm("table(CID)"), Term.createTerm("table(Cid)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentCid = payloadArg(0)  
								solve("updateWaiterState(X,checkAvailability($CurrentCid))","") //set resVar	
								solve("occupyHall($CurrentCid)","") //set resVar	
								solve("reserveTable(Num,$CurrentCid)","") //set resVar	
								if( currentSolution.isSuccess() ) {answer("table", "available", "available($CurrentCid)"   )  
								forward("clientatentrance", "clientatentrance($CurrentCid)" ,"waiter" ) 
								}
								else
								{answer("table", "full", "full($CurrentCid,$MaxStayTime)"   )  
								solve("freeHall($CurrentCid)","") //set resVar	
								}
						}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) println("waiter coap updated\n${geResourceRep()}") 
						}
						else
						{}
					}
					 transition(edgeName="t014",targetState="reach",cond=whenDispatch("clientatentrance"))
				}	 
				state("reach") { //this:State
					action { //it:State
						println("waiter reach")
						if( checkMsgContent( Term.createTerm("clientatentrance(Cid)"), Term.createTerm("clientatentrance(CurrentCid)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentCid = payloadArg(0)  
								solve("updateWaiterState(X,reach($CurrentCid))","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("moveKo(X,Y)"), Term.createTerm("moveKo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								solve("updateWaiterLoc(A,$X,$Y)","") //set resVar	
						}
						solve("coordinatesTo(entrancedoor,OldX,OldY,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {  val OldX = getCurSol("OldX").toString()
										val OldY = getCurSol("OldY").toString()
										val X = getCurSol("X").toString()
										val Y = getCurSol("Y").toString()		 
						request("moveTo", "moveTo($OldX,$OldY,$X,$Y)" ,"robot" )  
						}
						else
						{}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) println("waiter coap updated\n${geResourceRep()}") 
						}
						else
						{}
					}
					 transition(edgeName="t015",targetState="reachp2",cond=whenReply("moveOk"))
					transition(edgeName="t016",targetState="reach",cond=whenReply("moveKo"))
				}	 
				state("reachp2") { //this:State
					action { //it:State
						println("waiter reachp2")
						if( checkMsgContent( Term.createTerm("moveKo(X,Y)"), Term.createTerm("moveKo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								solve("updateWaiterLoc(_,$X,$Y)","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("moveOk(X,Y)"), Term.createTerm("moveOk(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("freeHall($CurrentCid)","") //set resVar	
								solve("updateWaiterLoc(entrancedoor,X,Y)","") //set resVar	
								solve("updateWaiterState(X,at(entrancedoor))","") //set resVar	
						}
						solve("teatable(Num,reserved($CurrentCid),clean)","") //set resVar	
						 val TableNum = getCurSol("Num").toString()  
						solve("coordinatesTo(teatable($TableNum),OldX,OldY,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {  val OldX = getCurSol("OldX").toString()
										val OldY = getCurSol("OldY").toString()
										val X = getCurSol("X").toString()
										val Y = getCurSol("Y").toString()		 
						request("moveTo", "moveTo($OldX,$OldY,$X,$Y)" ,"robot" )  
						}
						else
						{}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						}
						else
						{}
					}
					 transition(edgeName="t017",targetState="reachp3",cond=whenReply("moveOk"))
					transition(edgeName="t018",targetState="reachp2",cond=whenReply("moveKo"))
				}	 
				state("reachp3") { //this:State
					action { //it:State
						println("waiter reachp3")
						solve("teatable(Num,reserved($CurrentCid),clean)","") //set resVar	
						 val TableNum = getCurSol("Num").toString()  
						solve("updateWaiterState(X,deployed($CurrentCid,$TableNum))","") //set resVar	
						solve("updateWaiterLoc(teatable($TableNum),X,Y)","") //set resVar	
						solve("engageTable($TableNum,$CurrentCid)","") //set resVar	
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) println("waiter coap updated\n${geResourceRep()}") 
						}
						else
						{}
						emit("attable", "attable($CurrentCid)" ) 
					}
					 transition(edgeName="t019",targetState="takeOrder",cond=whenDispatch("placeorder"))
				}	 
				state("takeOrder") { //this:State
					action { //it:State
						println("waiter takeOrder")
						if( checkMsgContent( Term.createTerm("moveKo(X,Y)"), Term.createTerm("moveKo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								solve("updateWaiterLoc(S,$X,$Y)","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("placeorder(CID)"), Term.createTerm("placeorder(CurrentCid)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentCid = payloadArg(0)  
								solve("updateWaiterState(X,goTakeOrder($CurrentCid))","") //set resVar	
						}
						solve("teatable(Num,busy($CurrentCid),dirty)","") //set resVar	
						 val TableNum = getCurSol("Num").toString()  
						solve("coordinatesTo(teatable($TableNum),OldX,OldY,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {  val OldX = getCurSol("OldX").toString()
										val OldY = getCurSol("OldY").toString()
										val X = getCurSol("X").toString()
										val Y = getCurSol("Y").toString()		 
						request("moveTo", "moveTo($OldX,$OldY,$X,$Y)" ,"robot" )  
						}
						else
						{}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition(edgeName="t020",targetState="takeOrderp2",cond=whenReply("moveOk"))
					transition(edgeName="t021",targetState="takeOrder",cond=whenReply("moveKo"))
				}	 
				state("takeOrderp2") { //this:State
					action { //it:State
						solve("teatable(Num,busy($CurrentCid),dirty)","") //set resVar	
						 val TableNum = getCurSol("Num").toString()  
						solve("updateWaiterLoc(teatable($TableNum),X,Y)","") //set resVar	
						solve("updateWaiterState(X,takingOrder($CurrentCid))","") //set resVar	
						request("relayorder", "relayorder($CurrentCid)" ,"barman" )  
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition(edgeName="t022",targetState="serveOrder",cond=whenReply("orderready"))
				}	 
				state("serveOrder") { //this:State
					action { //it:State
						println("waiter serveOrder")
						if( checkMsgContent( Term.createTerm("orderready(Cid)"), Term.createTerm("orderready(CurrentCid)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentCid = payloadArg(0)  
								solve("updateWaiterState(X,getOrder($CurrentCid))","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("moveKo(X,Y)"), Term.createTerm("moveKo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								solve("updateWaiterLoc(S,$X,$Y)","") //set resVar	
						}
						solve("coordinatesTo(barman,OldX,OldY,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {  val OldX = getCurSol("OldX").toString()
										val OldY = getCurSol("OldY").toString()
										val X = getCurSol("X").toString()
										val Y = getCurSol("Y").toString()	 
						request("moveTo", "moveTo($OldX,$OldY,$X,$Y)" ,"robot" )  
						}
						else
						{}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition(edgeName="t023",targetState="serveOrderp2",cond=whenReply("moveOk"))
					transition(edgeName="t024",targetState="serveOrder",cond=whenReply("moveKo"))
				}	 
				state("serveOrderp2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveKo(X,Y)"), Term.createTerm("moveKo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								solve("updateWaiterLoc(_,$X,$Y)","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("moveOk(X,Y)"), Term.createTerm("moveOk(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("updateWaiterState(X,bar($CurrentCid))","") //set resVar	
								solve("updateWaiterLoc(barman,X,Y)","") //set resVar	
						}
						solve("teatable(Num,busy($CurrentCid),dirty)","") //set resVar	
						 val TableNum = getCurSol("Num").toString()  
						solve("coordinatesTo(teatable($TableNum),OldX,OldY,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {  val OldX = getCurSol("OldX").toString()
										val OldY = getCurSol("OldY").toString()
										val X = getCurSol("X").toString()
										val Y = getCurSol("Y").toString()  
						request("moveTo", "moveTo($OldX,$OldY,$X,$Y)" ,"robot" )  
						}
						else
						{}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition(edgeName="t025",targetState="serveOrderp3",cond=whenReply("moveOk"))
					transition(edgeName="t026",targetState="serveOrderp2",cond=whenReply("moveKo"))
				}	 
				state("serveOrderp3") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveOk(X,Y)"), Term.createTerm("moveOk(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("teatable(Num,busy($CurrentCid),dirty)","") //set resVar	
								  val X = payloadArg(0)
												val Y = payloadArg(1)   
												val TableNum = getCurSol("Num").toString()	 
								solve("updateWaiterLoc(teatable($TableNum),$X,$Y)","") //set resVar	
								solve("updateWaiterState(X,serving($CurrentCid))","") //set resVar	
								emit("delivered", "delivered($CurrentCid)" ) 
						}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						}
						else
						{}
					}
					 transition(edgeName="t027",targetState="getPayment",cond=whenDispatch("payment"))
				}	 
				state("getPayment") { //this:State
					action { //it:State
						println("waiter getPayment")
						if( checkMsgContent( Term.createTerm("payment(Cid)"), Term.createTerm("payment(CurrentCid)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentCid = payloadArg(0)  
								solve("updateWaiterState(X,getPayment($CurrentCid))","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("moveKo(X,Y)"), Term.createTerm("moveKo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								solve("updateWaiterLoc(_,$X,$Y)","") //set resVar	
						}
						solve("teatable(Num,busy($CurrentCid),dirty)","") //set resVar	
						 val TableNum = getCurSol("Num").toString()  
						solve("coordinatesTo(teatable($TableNum),OldX,OldY,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {  val OldX = getCurSol("OldX").toString()
										val OldY = getCurSol("OldY").toString()
										val X = getCurSol("X").toString()
										val Y = getCurSol("Y").toString()		 
						request("moveTo", "moveTo($OldX,$OldY,$X,$Y)" ,"robot" )  
						}
						else
						{}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition(edgeName="t028",targetState="getPaymentp2",cond=whenReply("moveOk"))
					transition(edgeName="t029",targetState="getPayment",cond=whenReply("moveKo"))
				}	 
				state("getPaymentp2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveOk(X,Y)"), Term.createTerm("moveOk(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								emit("paymentOk", "paymentOk($CurrentCid)" ) 
								solve("teatable(Num,busy($CurrentCid),dirty)","") //set resVar	
								 val TableNum = getCurSol("Num").toString()  
								solve("updateWaiterState(X,paymentatteatable($TableNum))","") //set resVar	
								solve("freeTable($TableNum,$CurrentCid)","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("moveKo(X,Y)"), Term.createTerm("moveKo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								solve("updateWaiterLoc(_,$X,$Y)","") //set resVar	
						}
						solve("coordinatesTo(exitdoor,OldX,OldY,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {  val OldX = getCurSol("OldX").toString()
										val OldY = getCurSol("OldY").toString()
										val X = getCurSol("X").toString()
										val Y = getCurSol("Y").toString()		 
						request("moveTo", "moveTo($OldX,$OldY,$X,$Y)" ,"robot" )  
						}
						else
						{}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition(edgeName="t030",targetState="escortToExit",cond=whenReply("moveOk"))
					transition(edgeName="t031",targetState="getPaymentp2",cond=whenReply("moveKo"))
				}	 
				state("escortToExit") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveOk(X,Y)"), Term.createTerm("moveOk(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								emit("exitOk", "exitOk($CurrentCid)" ) 
								solve("updateWaiterLoc(at(exitdoor),$X,$Y)","") //set resVar	
								solve("updateWaiterState(X,at(exitdoor))","") //set resVar	
						}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition( edgeName="goto",targetState="cleanTable", cond=doswitch() )
				}	 
				state("cleanTable") { //this:State
					action { //it:State
						println("waiter cleanTable")
						solve("dirtyTable(Num)","") //set resVar	
						 val TableNum = getCurSol("Num").toString()  
						solve("updateWaiterState(X,gocleanteatable($TableNum))","") //set resVar	
						solve("coordinatesTo(teatable($TableNum),OldX,OldY,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {  val OldX = getCurSol("OldX").toString()
										val OldY = getCurSol("OldY").toString()
										val X = getCurSol("X").toString()
										val Y = getCurSol("Y").toString()		 
						request("moveTo", "moveTo($OldX,$OldY,$X,$Y)" ,"robot" )  
						}
						else
						{}
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition(edgeName="t032",targetState="doClean",cond=whenReply("moveOk"))
					transition(edgeName="t033",targetState="cleanTable",cond=whenReply("moveKo"))
				}	 
				state("doClean") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveOk(X,Y)"), Term.createTerm("moveOk(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								solve("updateWaiterLoc(teatable(Num),$X,$Y)","") //set resVar	
								 val TableNum = getCurSol("Num").toString()  
								solve("updateWaiterState(X,cleaning($TableNum))","") //set resVar	
								delay(DelayTime)
								solve("cleanTable($TableNum)","") //set resVar	
								solve("roomstate(S)","") //set resVar	
								if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
								)
								if(Debug) 
								println("waiter coap updated")
								}
								else
								{}
						}
						stateTimer = TimerActor("timer_doClean", 
							scope, context!!, "local_tout_waiter_doClean", RestWaitTime )
					}
					 transition(edgeName="t034",targetState="rest",cond=whenTimeout("local_tout_waiter_doClean"))   
					transition(edgeName="t035",targetState="checkTableAvail",cond=whenRequest("table"))
				}	 
				state("rest") { //this:State
					action { //it:State
						println("waiter rest")
						if( checkMsgContent( Term.createTerm("moveKo(X,Y)"), Term.createTerm("moveKo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val X = payloadArg(0)
												val Y = payloadArg(1)    
								solve("updateWaiterLoc(_,$X,$Y)","") //set resVar	
								solve("roomstate(S)","") //set resVar	
								if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
								)
								if(Debug) 
								println("waiter coap updated")
								}
								else
								{}
						}
						solve("coordinatesTo(home,OldX,OldY,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {  val OldX = getCurSol("OldX").toString()
										val OldY = getCurSol("OldY").toString()
										val X = getCurSol("X").toString()
										val Y = getCurSol("Y").toString()		 
						request("moveTo", "moveTo($OldX,$OldY,$X,$Y)" ,"robot" )  
						}
						else
						{}
					}
					 transition(edgeName="t036",targetState="atHome",cond=whenReply("moveOk"))
					transition(edgeName="t037",targetState="rest",cond=whenReply("moveKo"))
				}	 
				state("atHome") { //this:State
					action { //it:State
						println("waiter athome")
						solve("updateWaiterState(X,rest)","") //set resVar	
						solve("updateWaiterLoc(home,X,Y)","") //set resVar	
						solve("roomstate(S)","") //set resVar	
						if( currentSolution.isSuccess() ) {updateResourceRep( getCurSol("S").toString()  
						)
						if(Debug) 
						println("waiter coap updated")
						}
						else
						{}
					}
					 transition(edgeName="t038",targetState="checkTableAvail",cond=whenRequest("table"))
				}	 
			}
		}
}
