System tearoom
mqttBroker "localhost" : 1883 eventTopic "unibo/gozzi/events"

//Client - Smartbell, Entering
Request notify : notify(TEMP)
Reply deny : deny(X)
Reply accept : accept(CID)
Reply full : full(CID, WTIME)

//Smartbell - Waiter, Free Table
Request table : table(CID)
Reply available : available(CID)
Reply full : full(CID, WTIME)
Dispatch clientatentrance : clientatentrance(Cid) // self message

//Client - Waiter - Barman, Requesting+serving tea
Dispatch placeorder : placeorder(CID)
Request relayorder : relayorder(Cid)
Reply orderready : orderready(Cid)
//---------------------------------------------------------
Event delivered : delivered($Cid) 	// for client simulation purpose
Event attable: attable(Cid)			// for client simulation purpose
//---------------------------------------------------------

//Client - Waiter, Requesting payment
Dispatch payment : payment(Cid)
//---------------------------------------------------------
Event paymentOk : paymentOk(Cid)	// for client simulation purpose
Event exitOk : exitOk(Cid)			// for client simulation purpose
//---------------------------------------------------------

Context ctxwaiter ip [host="localhost" port=8050]  			+mqtt
Context ctxsmartbell ip [host="localhost" port=8051]		+mqtt
//Context ctxhall ip [host="localhost" port=8052]			+mqtt
Context ctxbarman ip [host="localhost" port=8056]			+mqtt



//ExternalQActor barman context ctxbarman
QActor barman context ctxbarman{
	
	State s0 initial{
	}
	Transition t0
		whenRequest relayorder -> prepareTea
	
	State prepareTea{
		onMsg( relayorder : relayorder(Cid) ){
			[# val Cid = payloadArg(0) #]
			delay 1000 // time to prepare tea
			replyTo relayorder with orderready : orderready($Cid)
			updateResource [# "tea prepared for $Cid" #]
		}
	}
	Transition t0
		whenRequest relayorder -> prepareTea
}

QActor smartbell context ctxsmartbell{
	
	[# 
		val MaxTemp = 37.5 
		var Cid = 1
	#]
	
	State s0 initial{
		solve( consult("hallKB.pl") )
	}
	Transition t0
		whenRequest notify -> checkTemp
		
	State checkTemp{
		onMsg(notify : notify(Temp)){
			if [# payloadArg(0).toDouble() < MaxTemp #] {
				request waiter -m table : table($Cid) // case (a)
			}
			else{
				replyTo notify with deny : deny(0) //case (b)
			}
		}
	}
	Transition t1
		whenRequest 	notify 		-> checkTemp 	//in case (b)
		whenReply 		available 	-> replyClient 	//in case (a)
		whenReply 		full 		-> replyClient 	//in case (a)
		
	State replyClient{
		onMsg(available : available(CID)){
			replyTo notify with accept : accept($Cid)
		}
		onMsg(full : full(CID,WTIME)){
			[# val WaitTime = payloadArg(0) #]
			replyTo notify with full : full($Cid, $WaitTime)
		}
		[# Cid++ #] //new CID for next Client
	}
	Transition t2
		whenRequest notify -> checkTemp
}

QActor waiter context ctxwaiter {
	
	[#
		val MaxStayTime 	= 100000L	
		val DelayTime 		= 1000L
		val RestWaitTime 	= 5000L
	#]
	
	State s0 initial{
		println("waiter RA-s1 starting")
		discardMsg Off
		solve( consult("tearoomKB-RA-sprint1.pl") )
		
		solve( roomstate(S) ) 
		ifSolved { //Documentation says: #S => ${getCurSol("S").toString()}
			updateResource[# getCurSol("S").toString() #]
		}
	}
	Transition t0
		whenRequest table -> checkTableAvail
	
	//this state implements requirements "accept" and "inform"
	State checkTableAvail{
		println("waiter checkTableAvail")
		onMsg(table : table(Cid)){
			[# val Cid = payloadArg(0) #]
			solve( occupyHall($Cid) )
			solve( reserveTable(Num, $Cid) )//accept
			ifSolved {
				solve( roomstate(S) ) ifSolved { updateResource[# getCurSol("S").toString() #] }
				replyTo table with available : available($Cid)
				forward waiter -m clientatentrance : clientatentrance($Cid) //so that the waiter will eventually do the "reach" task
			}
			else{//inform
				replyTo table with full : full($Cid, $MaxStayTime)
				solve( freeHall($Cid) )
			}
		}
	}
	Transition t0
		whenMsg clientatentrance -> reach
	
	//this state implements requirement "reach"
	State reach{//goto entrance + goto table
		println("waiter reach")
		onMsg(clientatentrance : clientatentrance(Cid)){
			[# val Cid = payloadArg(0) #]
			delayVar DelayTime //goto entrancedoor
			solve( freeHall($Cid) )
			solve( updateWaiter(X,entrancedoor) ) solve( roomstate(S) ) ifSolved { updateResource[# getCurSol("S").toString() #] }
			
			solve( teatable(Num, reserved($Cid), clean) ) // find reserved table
			[# val TableNum = getCurSol("Num").toString() #]
			delayVar DelayTime //goto reserved table
			solve( updateWaiter(X, teatable($TableNum)) )
			solve( engageTable($TableNum, $Cid) ) // occupy table
			emit attable : attable($Cid)
			solve( roomstate(S) ) ifSolved { updateResource[# getCurSol("S").toString() #] }
		}
	}
	Transition t0
		whenMsg placeorder -> takeOrder
	
	//this state implements requirement "take"
	State takeOrder{//goto table + request relayorder
		println("waiter takeOrder")
		onMsg(placeorder : placeorder(Cid)){
			[# val Cid = payloadArg(0) #]
			solve( teatable(Num, busy($Cid), dirty) ) // find correct table
			[# val TableNum = getCurSol("Num").toString() #]
			delayVar DelayTime //goto correct table
			solve( updateWaiter(X, teatable($TableNum)) ) solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
			
			request barman -m relayorder : relayorder($Cid) //real task BL
		}
	}
	Transition t0
		whenReply orderready -> serveOrder
	
	//this state implements requirement "serve"
	State serveOrder{//goto bar + goto table
		println("waiter serveOrder")
		onMsg(orderready : orderready(Cid)){
			[# val Cid = payloadArg(0) #]
			solve( teatable(Num, busy($Cid), dirty) ) // find correct table
			[# val TableNum = getCurSol("Num").toString() #]
			delayVar DelayTime //goto barman
			
			solve( updateWaiter(X, bar) ) solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
			delayVar DelayTime //goto correct table
			
			solve( updateWaiter(X, teatable($TableNum)) ) solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
			
			//-------------------------------------------
			emit delivered : delivered($Cid) //just for simulation, in real life the client would see that the waiter has brought the tea
			//-------------------------------------------
		}
	}
	Transition t0
		whenMsg payment -> getPayment
	
	//this state implements requirements "collect" and "exit"
	State getPayment{//goto table + goto exitdoor
		println("waiter getPayment")
		onMsg(payment : payment(Cid)){
			[# val Cid = payloadArg(0) #]
			solve( teatable(Num, busy($Cid), dirty) ) // find correct table
			[# val TableNum = getCurSol("Num").toString() #]
			delayVar DelayTime //goto correct table	
			
			emit paymentOk : paymentOk($Cid)
			solve( updateWaiter(X, teatable($TableNum)) ) solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
			
			delayVar DelayTime //goto exitdoor
			emit exitOk : exitOk($Cid)
			solve( updateWaiter(X, exitdoor) ) 
			solve( freeTable($TableNum, $Cid) )
			solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
			}
	}
	Goto cleanTable
	
	State cleanTable{
		println("waiter cleanTable")
		solve( dirtyTable(Num) )
		ifSolved{
			[# val TableNum = getCurSol("Num").toString() #]
			delayVar DelayTime // go to table
			
			solve( updateWaiter(X, teatable($TableNum)) ) solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
			delayVar DelayTime // clean table, waiter cannot process incoming messages
			
			solve( cleanTable($TableNum) )	solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
			
		}
		solve( roomstate(S) ) ifSolved { 
					[#println( "$tt After clean ${getCurSol("S").toString()}" ) #]
					updateResource[# getCurSol("S").toString() #]
			}
	}
	Transition t0
		whenTimeVar RestWaitTime -> rest
		whenRequest table -> checkTableAvail
		
	State rest{
		println("waiter rest")
		delayVar DelayTime
		solve( updateWaiter(X, athome )) solve( roomstate(S) )	ifSolved { 	updateResource[# getCurSol("S").toString() #]	}
	}
	Transition t0
		whenRequest table -> checkTableAvail
	
}